/// Copyright Â© 2009-2020 Frictional Games
/// Copyright 2023 Michael Pollind
/// SPDX-License-Identifier: GPL-3.0
#define MATERIAL_SOLID 1
#include "deferred_resources.h.fsl"
#include "deferred_common.h.fsl"

RES(Tex2D(float4), dissolveMap, UPDATE_FREQ_NONE, t9, binding = 4);

STRUCT(PsIn) 
{
	DATA(float4, Position, SV_Position);
	DATA(float2, uv, TEXCOORD0);
    DATA(float3, view, TEXCOORD1);
    DATA(float3, normal, NORMAL);
    
    DATA(FLAT(uint), drawId, TEXCOORD2);
};

float4 PS_MAIN(PsIn In)
{
    INIT_MAIN;
    float2 texCoord = In.uv.xy;
    uint materialID = Get(uniformObjectBuffer)[In.drawId].materialID;
    
    #ifdef PARALLAX_ENABLED
        if(HasHeight(Get(uniformMaterialBuffer)[materialID].textureConfig)) {
            texCoord.xy = ParallaxRelief(
                SEARCH_SAMPLE_COUNT, 
                IsHeightMapSingleChannel(Get(uniformMaterialBuffer)[materialID].textureConfig), 
                Get(uniformMaterialBuffer)[materialID].heightMapScale * PARALAX_MULTIPLIER, 
                normalize(In.normal), 
                texCoord, 
                normalize(In.view), 
                Get(heightSampler), 
                Get(heightMap));
        }
    #endif    
    
    float diffuseAlpha;
    if(HasAlpha(Get(uniformMaterialBuffer)[materialID].textureConfig)) {
        if(IsAlphaSingleChannel(Get(uniformMaterialBuffer)[materialID].textureConfig)) {
            diffuseAlpha = SampleTex2D(Get(alphaMap), Get(alphaSampler), texCoord.xy).r;
        } else {
            diffuseAlpha = SampleTex2D(Get(alphaMap), Get(alphaSampler), texCoord.xy).a;
        }
    } else {
        diffuseAlpha = 1.0;
    }

    if(HasDissolveAlpha(Get(uniformMaterialBuffer)[materialID].textureConfig) || HasDissolveFilter(Get(uniformMaterialBuffer)[materialID].textureConfig)) {
        float2 vDissolveCoords = texCoord.xy * (1.0/128.0); //128 = size of dissolve texture.
        float fDissolve = SampleTex2D(dissolveMap, Get(nearestSampler), vDissolveCoords).w;
        
        if(HasDissolveAlpha(Get(uniformMaterialBuffer)[materialID].textureConfig)) {
            //Get in 0.75 - 1 range
            fDissolve = fDissolve*0.25 + 0.75;

            float fDissolveAlpha = SampleTex2D(Get(dissolveAlphaMap), Get(dissolveAlphaSampler), texCoord.xy).r;
            fDissolve -= (0.25 - fDissolveAlpha * 0.25);
        } else {
            //Get in 0.5 - 1 range.
            fDissolve = fDissolve*0.5 + 0.5;
        }
        diffuseAlpha = fDissolve - (1.0 - Get(uniformObjectBuffer)[In.drawId].dissolveAmount * diffuseAlpha) * 0.5;
    }

    
    if(diffuseAlpha < ALPHA_REJECT) {
        discard;
    }

    RETURN(float4(0,0,0,0));
}
