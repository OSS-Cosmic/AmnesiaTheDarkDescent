/// Copyright Â© 2009-2020 Frictional Games
/// Copyright 2023 Michael Pollind
/// SPDX-License-Identifier: GPL-3.0

CBUFFER(perFrameConstants, UPDATE_FREQ_PER_FRAME, b0, binding = 0)
{
    DATA(float4x4, invViewRotationMat, None);
    DATA(float4x4, viewMat, None);
    DATA(float4x4, invViewMat, None);
    DATA(float4x4, projMat, None);
    DATA(float4x4, viewProjMat, None);

    DATA(float, worldFogStart, None);
    DATA(float, worldFogLength, None);
    DATA(float, oneMinusFogAlpha, None);
    DATA(float, fogFalloffExp, None);
    DATA(float4, worldFogColor, None);

    DATA(float2, viewTexel, None);
    DATA(float2, viewportSize, None);
};

INLINE float3x3 ToNormalMat(float4x4 invModel, float4x4 invView) {
    //TODO fix for DIRECTX12
   return transpose(mul(float3x3(invModel[0].xyz, invModel[1].xyz, invModel[2].xyz), float3x3(invView[0].xyz, invView[1].xyz, invView[2].xyz)));
}

CBUFFER(uniformObjectBlock, UPDATE_FREQ_PER_DRAW, b1, binding = 1)
{
    DATA(float, dissolveAmount, None);
    DATA(float4x4, modelMat, None);
    DATA(float4x4, invModelMat, None);
    DATA(float4x4, uvMat, None);
};

#if defined(MATERIAL_SOLID)
    // material data
    CBUFFER(uniformMaterialBlock, UPDATE_FREQ_PER_BATCH, b2, binding = 2)
    {
        DATA(int, textureConfig, None);
        DATA(float, heightMapScale, None);
        DATA(float, heightMapBias, None);
        DATA(float, frenselBias, None);
        DATA(float, frenselPow, None);
    };
    INLINE bool HasDissolveFilter(int _textureConfig)   { return (_textureConfig & (1 << 14)) != 0; }
#elif defined(MATERIAL_TRANSLUCENT)
    CBUFFER(uniformMaterialBlock, UPDATE_FREQ_PER_BATCH, b2, binding = 2)
    {
        DATA(int, textureConfig, None);

        DATA(float, refractionScale, None);
        DATA(float, frenselBias, None);
        DATA(float, frenselPos, None);
        DATA(float, rimMulLight, None);
        DATA(float, rimMulPower, None);
    };
    
    INLINE bool UseRefractionNormals(int _textureConfig)   { return (_textureConfig & (1 << 14)) != 0; }
    INLINE bool UseRefractionEdgeCheck(int _textureConfig)   { return (_textureConfig & (1 << 15)) != 0; }
#elif defined(MATERIAL_WATER)
    CBUFFER(uniformMaterialBlock, UPDATE_FREQ_PER_BATCH, b2, binding = 2) {
        DATA(int, textureConfig, None);

        DATA(float, refractionScale, None);
        DATA(float, frenselBias, None);
        DATA(float, frenselPow, None);
        DATA(float, reflectionFadeStart, None);
        DATA(float, reflectionFadeEnd, None);
        DATA(float, waveSpeed, None);
        DATA(float, waveAmplitude, None);
        DATA(float, waveFreq, None);
    };

#endif

#define BLEND_MODE_ADD 0
#define BLEND_MODE_MUL 1
#define BLEND_MODE_MULX2 2
#define BLEND_MODE_ALPHA 3
#define BLEND_MODE_PREMUL_ALPHA 4
    
RES(Tex2D(float4), diffuseMap, UPDATE_FREQ_PER_BATCH, t0, binding = 5); 
RES(SamplerState, diffuseSampler, UPDATE_FREQ_PER_BATCH, s0, binding = 6); 

RES(Tex2D(float4), normalMap, UPDATE_FREQ_PER_BATCH, t1, binding = 7);
RES(SamplerState, normalSampler, UPDATE_FREQ_PER_BATCH, s1, binding = 8); 

RES(Tex2D(float4), specularMap, UPDATE_FREQ_PER_BATCH, t2, binding = 9);
RES(SamplerState, specularSampler, UPDATE_FREQ_PER_BATCH, s2, binding = 10); 

RES(Tex2D(float4), alphaMap, UPDATE_FREQ_PER_BATCH, t3, binding = 11);
RES(SamplerState, alphaSampler, UPDATE_FREQ_PER_BATCH, s3, binding = 12); 

RES(Tex2D(float4), heightMap, UPDATE_FREQ_PER_BATCH, t4, binding =  13);
RES(SamplerState, heightSampler, UPDATE_FREQ_PER_BATCH, s4, binding = 14); 

RES(Tex2D(float4), illuminationMap, UPDATE_FREQ_PER_BATCH, t5, binding = 15);
RES(SamplerState, illuminationSampler, UPDATE_FREQ_PER_BATCH, s5, binding = 16); 

RES(TexCube(float4), cubeMap, UPDATE_FREQ_PER_BATCH, t6, binding = 17);
RES(SamplerState, cubeSampler, UPDATE_FREQ_PER_BATCH, s6, binding = 18); 

RES(Tex2D(float4), dissolveAlphaMap, UPDATE_FREQ_PER_BATCH, t7, binding = 19);
RES(SamplerState, dissolveAlphaSampler, UPDATE_FREQ_PER_BATCH, s7, binding = 20); 

RES(Tex2D(float4), cubeMapAlpha, UPDATE_FREQ_PER_BATCH, t8, binding = 21);
RES(SamplerState, cubeMapAlphaSampler, UPDATE_FREQ_PER_BATCH, s8, binding = 22); 

RES(SamplerState, nearestSampler, UPDATE_FREQ_PER_BATCH, s9, binding = 23);
RES(SamplerState, bilinearSampler, UPDATE_FREQ_PER_BATCH, s10, binding = 24);

#include "material_resource.h.fsl"

