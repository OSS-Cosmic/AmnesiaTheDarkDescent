#define MATERIAL_SOLID 1
#include "deferred_resources.h.fsl"
#include "deferred_common.h.fsl"

RES(Tex2D(float4), dissolveMap, UPDATE_FREQ_NONE, t9, binding = 4);

STRUCT(PsIn) 
{
    DATA(float4, Position, SV_Position);
    DATA(float3, pos, POSITION);
    DATA(float2, uv, TEXCOORD0);
    DATA(float3, view, TEXCOORD1);
    DATA(float3, normal, NORMAL);
    DATA(float3, tangent, TANGENT);
    DATA(float3, bitangent, BITANGENT);
};

STRUCT(PsOut)
{
    DATA(float4, diffuse, SV_Target0);
    DATA(float4, normal, SV_Target1);
    DATA(float4, position, SV_Target2);
    DATA(float2, specular, SV_Target3);
};

PsOut PS_MAIN(PsIn In)
{
    INIT_MAIN;
    PsOut Out;
    uint materialID = Get(uniformObjectBuffer)[Get(objectIndex)].materialID;

    float2 texCoord = In.uv.xy;
    float3 cameraEyeSpace = normalize(In.pos).xyz;

#ifdef PARALLAX_ENABLED
    if(HasHeight(Get(uniformMaterialBuffer)[materialID].textureConfig)) {
        texCoord.xy  = ParallaxRelief(
            SEARCH_SAMPLE_COUNT, 
            IsHeightMapSingleChannel(Get(uniformMaterialBuffer)[materialID].textureConfig), 
            Get(uniformMaterialBuffer)[materialID].heightMapScale * PARALAX_MULTIPLIER, 
            normalize(In.normal), 
            texCoord, 
            normalize(In.view), 
            Get(heightSampler), 
            Get(heightMap));
    }
#endif

    float4 diffuseColor = SampleTex2D(Get(diffuseMap), Get(diffuseSampler), texCoord.xy);
    if(diffuseColor.w < ALPHA_REJECT ) {
        discard;
    }

    float3 normal = float3(0, 0, 0);
    if(HasNormal(Get(uniformMaterialBuffer)[materialID].textureConfig)) {
        float3 normalSample = SampleTex2D(Get(normalMap), Get(normalSampler), texCoord.xy).xyz - 0.5;
        normal = normalize(normalSample.x * In.tangent + normalSample.y * In.bitangent + normalSample.z * In.normal);
    } else {
        normal = normalize(In.normal);
    }

    if(HasCubeMap(Get(uniformMaterialBuffer)[materialID].textureConfig)) {
        float3 envUV = reflect(cameraEyeSpace, normal);
        envUV = mul(Get(invViewRotationMat), float4(envUV.xyz, 1.0)).xyz;
                    
        float4 reflectionColor = SampleTexCube(Get(cubeMap), Get(cubeSampler), envUV);
        
        float afEDotN = max(dot(-cameraEyeSpace, normal),0.0);
        float fFresnel = Fresnel(afEDotN,
            Get(uniformMaterialBuffer)[materialID].frenselBias, 
            Get(uniformMaterialBuffer)[materialID].frenselPow);
        
        if(HasCubeMapAlpha(Get(uniformMaterialBuffer)[materialID].textureConfig)) {
            reflectionColor *= SampleTex2D(Get(cubeMapAlpha), Get(cubeMapAlphaSampler), texCoord.xy).wwww;
        }
        Out.diffuse = diffuseColor + reflectionColor * fFresnel;
    } else {
        Out.diffuse = diffuseColor;
    }
    Out.normal = float4(normal.xyz, 0.0);
    Out.position = float4(In.pos.xyz, 1.0);
    if(HasSpecular(Get(uniformMaterialBuffer)[materialID].textureConfig)) {
        Out.specular = SampleTex2D(Get(specularMap), Get(specularSampler), texCoord.xy).xy;
    } else {
        Out.specular = float2(0,0);
    }

    RETURN(Out);
}
