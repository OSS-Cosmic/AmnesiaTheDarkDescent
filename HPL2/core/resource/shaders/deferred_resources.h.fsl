
CBUFFER(perFrameConstants, UPDATE_FREQ_PER_FRAME, b0, binding = 0)
{
    DATA(float4x4, invViewRotationMat, None);
    DATA(float4x4, viewMat, None);
    DATA(float4x4, projMat, None);
    DATA(float4x4, viewProjMat, None);
};

CBUFFER(uniformObjectBlock, UPDATE_FREQ_PER_DRAW, b1, binding = 1)
{
    DATA(float4x4, modelMat, None);
    DATA(float4x4, uvMat, None);

    DATA(float4x4, modelViewMat, None);
    DATA(float4x4, modelViewProjMat, None);
    DATA(float3x3, normalMat, None);

};

#ifdef MATERIAL_SOLID
    // material data
    CBUFFER(uniformMaterialBlock, UPDATE_FREQ_PER_BATCH, b2, binding = 2)
    {
        DATA(int, textureConfig, None);
        DATA(float, heightMapScale, None);
        DATA(float, heightMapBias, None);
        DATA(float, frenselBias, None);
        DATA(float, frenselPow, None);
    };
    INLINE bool HasDissolveFilter(int _textureConfig)   { return (_textureConfig & (1 << 9)) != 0; }
#endif

RES(Tex2D(float4), diffuseMap, UPDATE_FREQ_PER_BATCH, t1, binding = 5); 
RES(Tex2D(float4), normalMap, UPDATE_FREQ_PER_BATCH, t2, binding = 6);
RES(Tex2D(float4), specularMap, UPDATE_FREQ_PER_BATCH, t3, binding = 7);
RES(Tex2D(float4), alphaMap, UPDATE_FREQ_PER_BATCH, t4, binding = 8);
RES(Tex2D(float4), heightMap, UPDATE_FREQ_PER_BATCH, t5, binding = 9);
RES(Tex2D(float4), illuminationMap, UPDATE_FREQ_PER_BATCH, t6, binding = 10);
RES(TexCube(float4), cubeMap, UPDATE_FREQ_PER_BATCH, t7, binding = 11);
RES(Tex2D(float4), dissolveAlphaMap, UPDATE_FREQ_PER_BATCH, t8, binding = 12);
RES(Tex2D(float4), cubeMapAlpha, UPDATE_FREQ_PER_BATCH, t9, binding = 13);

RES(SamplerState, nearestSampler, UPDATE_FREQ_PER_BATCH, s1, binding = 14);
RES(SamplerState, bilinearSampler, UPDATE_FREQ_PER_BATCH, s2, binding = 15);

INLINE bool HasDiffuse(int _textureConfig)        { return (_textureConfig & (1 << 0)) != 0; }
INLINE bool HasNormal(int _textureConfig)         { return (_textureConfig & (1 << 1)) != 0; }
INLINE bool HasSpecular(int _textureConfig)       { return (_textureConfig & (1 << 2)) != 0; }
INLINE bool HasAlpha(int _textureConfig)          { return (_textureConfig & (1 << 3)) != 0; }
INLINE bool HasHeight(int _textureConfig)         { return (_textureConfig & (1 << 4)) != 0; }
INLINE bool HasIllumination(int _textureConfig)   { return (_textureConfig & (1 << 5)) != 0; }
INLINE bool HasCubeMap(int _textureConfig)        { return (_textureConfig & (1 << 6)) != 0; }
INLINE bool HasDissolveAlpha(int _textureConfig)  { return (_textureConfig & (1 << 7)) != 0; }
INLINE bool HasCubeMapAlpha(int _textureConfig)   { return (_textureConfig & (1 << 8)) != 0; }


