#include "scene_resource.h.fsl"
#include "packing.h.fsl"
#include "parallax_bindless.h.fsl"

STRUCT(PsIn)
{
        DATA(float4,     Position,  SV_Position);
        DATA(float3,     pos,       POSITION);
        DATA(float2,     uv,        TEXCOORD0);
        DATA(FLAT(uint), drawID,    TEXCOORD1);
        DATA(float3,     normal,    NORMAL);
        DATA(float3,     tangent,   TANGENT);
        DATA(float3,     bitangent, BITANGENT);
};

STRUCT(PsOut)
{
    DATA(float4, visility, SV_Target0);
};

PsOut PS_MAIN(PsIn In, SV_PrimitiveID(uint) primitiveID)
{
    INIT_MAIN;
    PsOut Out;

    UniformObject obj = Get(sceneObjects)[In.drawID];
    uint materialIndex = MATERIAL_INDEX(obj.materialID);
    DiffuseMaterial diffuseMat = Get(sceneDiffuseMat)[materialIndex];  

    SceneTexture alphaTexture = CreateSceneTexture(diffuseMat.samplerIndex, DiffuseMaterial_AlphaTexture_ID(diffuseMat));
    SceneTexture heightTexture = CreateSceneTexture(diffuseMat.samplerIndex, DiffuseMaterial_HeightTexture_ID(diffuseMat));
   
    float2 parallax = float2(0,0);
    if(IsSceneTextureValid(heightTexture)) {
        parallax = ParallaxAdvance(
            In.uv, 
            0.0,
            32.0, 
            diffuseMat.heightMapScale * PARALLAX_MULTIPLIER,
            In.pos,
            In.normal,
            In.tangent,
            In.bitangent,
            heightTexture,
            (diffuseMat.materialConfig & MATERIAL_IS_HEIGHT_SINGLE_CHANNEL) > 0);
    }
    
    float diffuseAlpha = 1.0;
    float4 value; 
    if(SampleSceneTextureFloat4(alphaTexture, In.uv + parallax, value)) {
        if((diffuseMat.materialConfig & MATERIAL_IS_ALPHA_SINGLE_CHANNEL) > 0) {
            diffuseAlpha = value.r;
        } else {
            diffuseAlpha = value.a;
        }
    }

    if(diffuseAlpha < 0.5) {
        discard;
    }
    
    Out.visility = unpackUnorm4x8(SCENE_VIZ_ALPHA_ID(In.drawID, primitiveID)); 
    RETURN(Out);
}


