#include "scene_resource.h.fsl"
#include "packing.h.fsl"
#include "parallax_bindless.h.fsl"

STRUCT(PsIn)
{
        DATA(float4,     Position,  SV_Position);
        DATA(float3,     pos,       POSITION);
        DATA(float2,     uv,        TEXCOORD0);
        DATA(FLAT(uint), drawID,    TEXCOORD1);
        DATA(float3,     normal,    NORMAL);
        DATA(float3,     tangent,   TANGENT);
        DATA(float3,     bitangent, BITANGENT);
};

STRUCT(PsOut)
{
    DATA(float4, visility, SV_Target0);
};

PsOut PS_MAIN(PsIn In, SV_PrimitiveID(uint) primitiveID)
{
    INIT_MAIN;
    PsOut Out;

    UniformObject obj = Get(sceneObjects)[In.drawID];
    uint materialIndex = MATERIAL_INDEX(obj.materialID);
    DiffuseMaterial diffuseMat = Get(sceneDiffuseMat)[materialIndex];  

    MaterialTexture alphaTexture = CreateMaterialTexture(diffuseMat.samplerIndex, DiffuseMaterial_AlphaTexture_ID(diffuseMat));
    MaterialTexture heightTexture = CreateMaterialTexture(diffuseMat.samplerIndex, DiffuseMaterial_HeightTexture_ID(diffuseMat));
    MaterialTexture dissolveAlphaTexture = CreateMaterialTexture(diffuseMat.samplerIndex, DiffuseMaterial_DissolveAlphaTexture_ID(diffuseMat));
  
    float diffuseAlpha = 1.0;

    float2 texCoord = In.uv;
    if(IsMaterialTextureValid(heightTexture)) {
        texCoord += ParallaxAdvance(
            In.uv, 
            0.0,
            32.0, 
            diffuseMat.heightMapScale * PARALLAX_MULTIPLIER,
            In.pos,
            In.normal,
            In.tangent,
            In.bitangent,
            heightTexture,
            (diffuseMat.materialConfig & MATERIAL_IS_HEIGHT_SINGLE_CHANNEL) > 0);
    }


    float4 value; 
    if(SampleMaterialTextureFloat4(alphaTexture, texCoord, value)) {
        if((diffuseMat.materialConfig & MATERIAL_IS_ALPHA_SINGLE_CHANNEL) > 0) {
            diffuseAlpha = value.r;
        } else {
            diffuseAlpha = value.a;
        }
    }

    if(obj.dissolveAmount < 1.0 || IsMaterialTextureValid(alphaTexture) || (diffuseMat.materialConfig & MATERIAL_USE_ALPHA_DISSOLVE_FILTER) > 0) {
        const float2 dissolveCoord = In.Position.xy * (1.0/128.0); //128 = size of dissolve texture.
        float fDissolve = SampleTex2D(Get(dissolveTexture), Get(nearPointWrapSampler), dissolveCoord).x;
        
        if(IsMaterialTextureValid(dissolveAlphaTexture)) {
            //Get in 0.75 - 1 range
            fDissolve = fDissolve * 0.25 + 0.75;

            float4 alphaValue;
	        SampleMaterialTextureFloat4(dissolveAlphaTexture, texCoord, alphaValue);
            float fDissolveAlpha = alphaValue.r;
            fDissolve -= (0.25 - fDissolveAlpha * 0.25);
        } else {
            //Get in 0.5 - 1 range.
            fDissolve = fDissolve*0.5 + 0.5;
        }
        diffuseAlpha = fDissolve -  (1.0 - (obj.dissolveAmount * diffuseAlpha)) * 0.5;
    }
    
    if(diffuseAlpha < 0.5) {
        discard;
    }
    
    Out.visility = unpackUnorm4x8(SCENE_VIZ_ALPHA_ID(In.drawID, primitiveID)); 
    RETURN(Out);
}


