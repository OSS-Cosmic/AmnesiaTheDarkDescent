STRUCT(PsIn) 
{
    DATA(float4, Position, SV_Position);
    DATA(float2, uv, TEXCOORD0);
};

PUSH_CONSTANT(postEffectConstants, b0)
{
    DATA(float, size, None);
    DATA(float, blurStartDist, None);
};

RES(SamplerState, inputSampler, UPDATE_FREQ_NONE, s0, binding = 0);
RES(Tex2D(float4), sourceInput, UPDATE_FREQ_PER_FRAME, t0, binding = 1);

float fTotalMul = 1.1;
float4 PS_MAIN(PsIn In) 
{    
    INIT_MAIN;

    float vColorMul[5]; 
    vColorMul[0] = 0.1;
    vColorMul[1] = 0.2;
    vColorMul[2] = 0.5;
    vColorMul[3] = 0.2;
    vColorMul[4] = 0.1;

    float vSizeMul[5]; 
    vSizeMul[0] = -1.0;
    vSizeMul[1] = -0.5;
    vSizeMul[2] = 0.0;
    vSizeMul[3] = 0.5;
    vSizeMul[4] = 1.0;
	
    uint2 screenSize = uint2(GetDimensions(Get(sourceInput), NO_SAMPLER));
    float2 viewTexel = 1.0 / float2(screenSize.x, screenSize.y); 
    float2 halfScreenSize = screenSize.xy / 2.0;
    float2 screenCoord = In.uv * screenSize.xy;

    float2 vDir = halfScreenSize - screenCoord;
    float fDist = length(vDir) / halfScreenSize.x;
    vDir = normalize(vDir);
    fDist = max(0.0, fDist - Get(blurStartDist));
    
    vDir *= fDist * Get(size) * screenSize.x;
                    
    float3 vDiffuseColor = float3(0.0, 0.0, 0.0);
    
    for(int i=0; i<5; ++i)
    {
        vDiffuseColor += mul(SampleTex2D(Get(sourceInput),Get(inputSampler), (screenCoord + vDir * vSizeMul[i]) * viewTexel.xy).xyz, vColorMul[i]);
    }
    vDiffuseColor /= fTotalMul;
	

    RETURN(float4(vDiffuseColor, 1.0));
}

