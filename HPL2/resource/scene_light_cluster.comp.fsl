#include "scene_light_cluster_resource.h.fsl"

NUM_THREADS(LIGHT_CLUSTER_WIDTH, LIGHT_CLUSTER_HEIGHT, 1)
void CS_MAIN(SV_GroupThreadID(uint3) threadInGroupId, SV_GroupID(uint3) groupId)
{
	INIT_MAIN;
	const float invClusterWidth  = 1.0f / float(LIGHT_CLUSTER_WIDTH);
	const float invClusterHeight = 1.0f / float(LIGHT_CLUSTER_HEIGHT);
  ViewportInfo viewInfo = Get(viewports)[PRIMARY_VIEWPORT_INDEX];
  float2 size = viewInfo.rect.zw;
  float4x4 viewProjMat = mul(viewInfo.projMat, viewInfo.viewMat);

	// aspect ratio is hard coded to 4/3
	const float aspectRatio = 4.0/3.0;
  PointLight lightData = Get(pointLights)[groupId.x];
	
	float4 lightPosWorldSpace = float4(lightData.lightPos.xyz, 1.0f);
	float4 lightPosClipSpace  = mul(viewProjMat, lightPosWorldSpace);
	float invLightPosW = 1.0f / lightPosClipSpace.w;
	float3 lightPos = lightPosClipSpace.xyz * invLightPosW;

	float fov = 2.0 * atan((2.0 * viewInfo.zNear)/viewInfo.projMat[1][1]);
	float projRadius = 2.0f * lightData.lightRadius * (1 / tan(fov * 0.5f)) * invLightPosW;
	projRadius *= size.x > size.y ? aspectRatio : 1 / aspectRatio;
	
	// Early exit light if it's behind the camera
	if (lightPosClipSpace.w < 0.0f && -lightPosClipSpace.w > lightData.lightRadius) {
		RETURN();
	}
	
	lightPos.x *= aspectRatio;
	
	// Cluster coordinates in post perspective clip space
	float clusterLeft   = float(threadInGroupId.x) * invClusterWidth;
	float clusterTop    = float(threadInGroupId.y) * invClusterHeight;
	float clusterRight  = clusterLeft + invClusterWidth;
	float clusterBottom = clusterTop + invClusterHeight;

	// Transform coordinates from range [0..1] to range [-1..1]
	clusterLeft   = clusterLeft   * 2.0f - 1.0f;
	clusterTop    = clusterTop    * 2.0f - 1.0f;
	clusterRight  = clusterRight  * 2.0f - 1.0f;
	clusterBottom = clusterBottom * 2.0f - 1.0f;

	clusterLeft  *= aspectRatio;
	clusterRight *= aspectRatio;

	float clusterCenterX = (clusterLeft + clusterRight) * 0.5f;
	float clusterCenterY = (clusterTop + clusterBottom) * 0.5f;
	float clusterRadius  = distance(float2(clusterLeft, clusterTop), float2(clusterRight, clusterBottom)) * 0.5f;

	// Check if the light projection overlaps the cluster: add the light bit to this cluster coords
	float distanceToCenter = distance(float2(clusterCenterX, clusterCenterY), lightPos.xy);

	if (distanceToCenter - clusterRadius < abs(projRadius))
	{
		// Increase light count on this cluster
		uint lightArrayPos = 0;
		AtomicAdd(Get(lightClustersCount)[LIGHT_CLUSTER_COUNT_POS(threadInGroupId.x, threadInGroupId.y)], 1, lightArrayPos);

		// Add light id to cluster
		AtomicExchange(Get(lightClusters)[LIGHT_CLUSTER_DATA_POS(lightArrayPos, threadInGroupId.x, threadInGroupId.y)], groupId.x, lightArrayPos);
	}
}

