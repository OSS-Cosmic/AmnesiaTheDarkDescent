/// Copyright © 2009-2020 Frictional Games
/// Copyright 2023 Michael Pollind
/// SPDX-License-Identifier: GPL-3.0
#include "scene_resource.h.fsl"
#include "math_utils.h.fsl"

STRUCT(PsIn) 
{
    DATA(float4, Position, SV_Position);
    DATA(float3, pos, POSITION);
    DATA(float2, uv, TEXCOORD0);
#if !defined(INDIRECT_ROOT_CONSTANT)
    DATA(FLAT(uint), drawID,    TEXCOORD1);
#endif
    DATA(float4, color, COLOR);
};

float4 PS_MAIN(PsIn In)
{
    INIT_MAIN;
    #if !defined(INDIRECT_ROOT_CONSTANT)
        Particle particle = Get(particles)[In.drawID];
    #else 
        Particle particle = Get(particles)[Get(indirectDrawId)];
    #endif

    float4 finalColor = float4(0.0, 0.0 ,0.0, 1.0);
    const uint diffuseTextureIndex = particle.diffuseTextureIndex;
    BeginNonUniformResourceIndex(diffuseTextureIndex);
      finalColor = SampleTex2D(Get(sceneTextures)[diffuseTextureIndex], Get(sceneSampler), In.uv) * In.color;
    EndNonUniformResourceIndex(); 

    float finalAlpha = particle.sceneAlpha;
    if ((Get(worldInfo).worldFlags & WORLD_FLAG_IS_FOG_ENABLED) > 0) {
        float fFogAmount =  pow(clamp((-In.pos.z - Get(worldInfo).worldFogStart) / Get(worldInfo).worldFogLength, 0.0, 1.0), Get(worldInfo).fogFalloffExp);
        finalAlpha = (Get(worldInfo).oneMinusFogAlpha * fFogAmount + (1.0 - fFogAmount)) * finalAlpha;
    }

    #ifdef USE_BLEND_MODE_ADD 
        finalColor.xyz *= finalAlpha * particle.lightLevel;
    #endif

    #ifdef USE_BLEND_MODE_MUL 
        finalColor.xyz += (float3(1.0,1.0, 1.0) - finalColor.xyz) * (1.0-finalAlpha);
    #endif

    #ifdef USE_BLEND_MODE_MULX2
        float fBlendMulAlpha = particle.lightLevel * finalAlpha;
        finalColor.xyz = mul(finalColor.xyz, fBlendMulAlpha) + mul(float3(0.5,0.5,0.5), (1.0 - fBlendMulAlpha));
    #endif

    #ifdef USE_BLEND_MODE_ALPHA
        finalColor.xyz *= particle.lightLevel;
        finalColor.a *= finalAlpha;
    #endif

    #ifdef USE_BLEND_MODE_PREMUL_ALPHA
        finalColor *= finalAlpha;
        finalColor.xyz *= particle.lightLevel;
    #endif

    if(finalColor.a < 0.01) {
        discard;
    }
    RETURN(finalColor);
}
