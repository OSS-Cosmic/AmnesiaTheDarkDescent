#ifndef _SCENE_RESOURCE_DEFS_H_
#define _SCENE_RESOURCE_DEFS_H_

#define PARALLAX_MULTIPLIER 0.7

#define LIGHT_CLUSTER_WIDTH 8
#define LIGHT_CLUSTER_HEIGHT 8
#define LIGHT_CLUSTER_COUNT 128

#define POINT_LIGHT_MAX_COUNT  (256)
#define SCENE_OPAQUE_COUNT (512)

#define LIGHT_CLUSTER_COUNT_POS(ix, iy) ( ((iy)*LIGHT_CLUSTER_WIDTH)+(ix) )
#define LIGHT_CLUSTER_DATA_POS(il, ix, iy) ( LIGHT_CLUSTER_COUNT_POS(ix, iy)*LIGHT_CLUSTER_COUNT + (il) )

#define INVALID_TEXTURE_INDEX (0xffff)

#define PRIMARY_VIEWPORT_INDEX 0

#define SCENE_TEXTURE_WRAP_CLAMP (0)
#define SCENE_TEXTURE_WRAP_REPEAT (1) 
#define SCENE_TEXTURE_WRAP_CLAMP_TO_BORDER (2)
#define SCENE_TEXTURE_WRAP_COUNT (3)

#define SCENE_TEXTURE_FILTER_NEAR (0)
#define SCENE_TEXTURE_FILTER_BILINEAR (1) 
#define SCENE_TEXTURE_FILTER_TRILINEAR (2)
#define SCENE_TEXTURE_FILTER_COUNT (3)

#define SCENE_TEXTURE_ANTISTROPY_NONE (0)
#define SCENE_TEXTURE_ANTISTROPY_8 (1) 
#define SCENE_TEXTURE_ANTISTROPY_16 (2)
#define SCENE_TEXTURE_ANTISTROPY_COUNT (3)

#define SCENE_SAMPLER(wrap, filter) ((wrap * SCENE_TEXTURE_FILTER_COUNT) + filter)

#define SCENE_MAX_TEXTURE_COUNT  (4096)
#define SCENE_MAX_FILTER_COUNT (SCENE_TEXTURE_FILTER_COUNT * SCENE_TEXTURE_WRAP_COUNT) 
#define SCENE_FILTER_SWITCH_CASE case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: case 8: 

STRUCT(DiffuseMaterial) {
    DATA(uint,  tex[4], None);
    DATA(uint,  samplerIndex, None);
    DATA(uint,  materialConfig, None);
    DATA(float, heightMapScale, None);
    DATA(float, heightMapBias, None);
    DATA(float, frenselBias, None);
    DATA(float, frenselPow, None);
    DATA(uint, __pad0, NONE);
    DATA(uint, __pad1, NONE);
};
uint DiffuseMaterial_DiffuseTexture_ID(DiffuseMaterial mat) {return (mat.tex[0] & 0xffff);}
uint DiffuseMaterial_NormalTexture_ID(DiffuseMaterial mat) {return ((mat.tex[0] >> 16) & 0xffff);}
uint DiffuseMaterial_AlphaTexture_ID(DiffuseMaterial mat) {return (mat.tex[1] & 0xffff);}
uint DiffuseMaterial_SpecularTexture_ID(DiffuseMaterial mat) {return ((mat.tex[1] >> 16) & 0xffff);}
uint DiffuseMaterial_HeightTexture_ID(DiffuseMaterial mat) {return (mat.tex[2] & 0xffff);}
uint DiffuseMaterial_IlluminiationTexture_ID(DiffuseMaterial mat) {return ((mat.tex[2] >> 16) & 0xffff);}
uint DiffuseMaterial_DissolveAlphaTexture_ID(DiffuseMaterial mat) {return (mat.tex[3] & 0xffff);}
uint DiffuseMaterial_CubeMapAlphaTexture_ID(DiffuseMaterial mat) {return ((mat.tex[3] >> 16) & 0xffff);}

STRUCT(MaterialTexture) 
{
    DATA(bool, hasGradient, None);
    DATA(float2, texCoordDX, None);
    DATA(float2, texCoordDY, None);
    
    DATA(uint, filterID, None);
    DATA(uint, textureID, None);
};
bool IsMaterialTextureValid(MaterialTexture tex) {
    return !(tex.textureID == INVALID_TEXTURE_INDEX);
}
MaterialTexture CreateGradientMaterialTexture(uint filterID, uint textureID, float2 texCoordDX, float2 texCoordDY) {
    MaterialTexture tex;
    tex.filterID = filterID;
    tex.textureID = textureID;
    tex.texCoordDX = texCoordDX;
    tex.texCoordDY = texCoordDY;
    tex.hasGradient = true;
    return tex;
}
MaterialTexture CreateMaterialTexture(uint filterID, uint textureID) {
    MaterialTexture tex;
    tex.filterID = filterID;
    tex.textureID = textureID;
    tex.hasGradient = false;
    return tex;
}

STRUCT(UniformObject) 
{
    DATA(uint,     indirectDrawOffset, None);
    DATA(float,    dissolveAmount, None);
    DATA(uint,     materialID, None);
    DATA(float,    lightLevel, None);
    DATA(float,    illuminationAmount, None);
    DATA(uint, __pad0, NONE);
    DATA(uint, __pad1, NONE);
    DATA(uint, __pad2, NONE);
    DATA(float4x4, modelMat, None);
    DATA(float4x4, invModelMat, None);
    DATA(float4x4, uvMat, None);
};

#define MATERIAL_IS_ALPHA_SINGLE_CHANNEL (0x1)
#define MATERIAL_IS_HEIGHT_SINGLE_CHANNEL (0x2)
#define MATERIAL_USE_ALPHA_DISSOLVE_FILTER (0x4)

#define MATERIAL_TYPE_SOLID_DIFFUSE     1
#define MATERIAL_TYPE_SOLID_TRANSLUCENT 2
#define MATERIAL_TYPE_SOLID_WATER       3
#define MATERIAL_TYPE_SOLID_DECAL       4

#define MATERIAL_ID_BIT    0
#define MATERIAL_INDEX_BIT 8

#define MATERIAL_ID_MASK         0xff // 0000 0000 0000 0000 0000 0000 1111 1111
#define MATERIAL_INDEX_MASK  0xffff00 // 0000 0000 1111 1111 1111 1111 0000 0000

#define MATERIAL_ID(id) ((MATERIAL_ID_MASK & (id)) >> MATERIAL_ID_BIT)
#define MATERIAL_INDEX(id) ((MATERIAL_INDEX_MASK & (id)) >> MATERIAL_INDEX_BIT) 

STRUCT(PointLight) {
    DATA(float3, lightPos, none);
    DATA(uint, config, none);
    DATA(float4, lightColor, none);
    DATA(float, lightRadius, none);
    DATA(uint, __pad0, NONE);
    DATA(uint, __pad1, NONE);
    DATA(uint, __pad2, NONE);
};

STRUCT(SpotLight) {
    DATA(mat4, viewProjection, none);
    DATA(float3, lightPos, none);
    DATA(uint, config, none);
    DATA(float3, direction, none);
    DATA(float, angle, none);
    DATA(float4, lightColor, none);
    DATA(float, radius, none);
    DATA(uint, goboTexture, NONE);
    DATA(uint, __pad1, NONE);
    DATA(uint, __pad2, NONE);
};
#define LIGHT_TYPE_POINT_LIGHT 1
#define LIGHT_TYPE_SPOT_LIGHT 2 

#define LIGHT_ID_BIT    0
#define LIGHT_INDEX_BIT 8

#define LIGHT_ID_MASK         0xff // 0000 0000 0000 0000 0000 0000 1111 1111
#define LIGHT_INDEX_MASK  0xffff00 // 0000 0000 1111 1111 1111 1111 0000 0000

#define LIGHT_ID(id) ((LIGHT_ID_MASK & (id)) >> LIGHT_ID_BIT)
#define LIGHT_INDEX(id) ((LIGHT_INDEX_MASK & (id)) >> LIGHT_INDEX_BIT) 
#define LIGHT_ENCODE(id, index) (((id << LIGHT_ID_BIT) & LIGHT_ID_MASK) | ((index << LIGHT_INDEX_BIT) & LIGHT_INDEX_MASK)) 

STRUCT(WorldInfo) {
    DATA(float, worldFogStart, None);
    DATA(float, worldFogLength, None);
    DATA(float, oneMinusFogAlpha, None);
    DATA(float, fogFalloffExp, None);
    DATA(float4, worldFogColor, None);
};

STRUCT(ViewportInfo) {
    DATA(float4x4, invViewMat, None);
    DATA(float4x4, invViewProj, None);
    DATA(float4x4, viewMat, None);
    DATA(float4x4, projMat, None);
    DATA(float4, rect, None);    
    DATA(float3, cameraPosition, None);
    DATA(uint, __pad0, NONE);
    DATA(float, zNear, None);
    DATA(float, zFar, None);
    DATA(uint, __pad1, NONE);
};

#endif

